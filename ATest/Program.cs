using Comm;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ATest
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Process process = Process.GetCurrentProcess();
                if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(process.ProcessName)).Length > 1)
                {
                    if (process.ProcessName == "ATest")
                    {
                        LogUtil.writeLog(process.ProcessName + "Kill", "KillProcess");
                        process.Kill();
                    }
                }
                insertATest();
            }
            catch (Exception ex)
            {
                LogUtil.writeLog("程序异常退出：" + ex.ToString(), "ATestException");
                Process process = Process.GetCurrentProcess();
                if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(process.ProcessName)).Length > 1)
                {
                    if (process.ProcessName == "ATest")
                    {
                        process.Kill();
                    }
                }
            }

        }

        public static void insertATest()
        {
            //string sql = "SELECT * FROM ATest WITH(NOLOCK)";
            ////DataTable dt = 
            //SqlConnection conn = new SqlConnection();
            
            string[] firstName = new string[] {
"赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "楮", "卫", "蒋", "沈", "韩", "杨",
"朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜",
"戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎",
"鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐",
"费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常",
"乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄",
"和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧",
"计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁",
"杜", "阮", "蓝", "闽", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭",
"梅", "盛", "林", "刁", "锺", "徐", "丘", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍",
"虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗",
"丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚",
"程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "麹", "家", "封",
"芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓",
"牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫",
"宁", "仇", "栾", "暴", "甘", "斜", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙",
"叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂",
"索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双",
"闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍",
"郤", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农",
"温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容",
"向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘",
"匡", "国", "文", "寇", "广", "禄", "阙", "东", "欧", "殳", "沃", "利", "蔚", "越", "夔", "隆",
"师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空",
"曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "后", "荆", "红",
"游", "竺", "权", "逑", "盖", "益", "桓", "公", "仉", "督", "晋", "楚", "阎", "法", "汝", "鄢",
"涂", "钦", "岳", "帅", "缑", "亢", "况", "后", "有", "琴", "归", "海", "墨", "哈", "谯", "笪",
"年", "爱", "阳", "佟", "商", "牟", "佘", "佴", "伯", "赏","万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊",
"澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐",
"锺离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "丌官", "司寇", "子车", "微生",
"颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷", "公良", "拓拔", "夹谷", "宰父", "谷梁",
"段干", "百里", "东郭", "南门", "呼延", "羊舌", "梁丘", "左丘", "东门", "西门", "南宫"
            };

            string[] boyName = new string[]
            {
                "靖淞","昭易","臻翔","泽鑫","芮军","浩奕","宏明","忠贤","锦辉","嘉吉","凌玟","晟赫","仲霖","沁赫","奕尊","孝成","瀚雄","晓然","继智","展鸣","俊泽","子中","羽睿","品灼","鸿翔","明轩","棋齐","广嘉","陆铭","志卿","连彬","景智","孟昕","羿然","文渊","羿楦","元毅","霈胜","宇峻","子博","语霖","胜佑","俊涛","浩淇","书玮","泽楷","嘉宁","敬宣","韦宁","建新","宇怀","皓玄","冠捷","清风","皓忠","振东","皓峰","璟烨","子恒","梓豪","佩璟","敬涛","清涵","羿宏","雁升","季霖","启文","帛涛","梓骐","绎涵","铭辉","廷恩","奕铭","仁梁","钦月","立椋","羿帆","钧宇","珀承","浩楠","钟霖","翔东","昊伟","楚桥","智霖","浩杰","炎承","思哲","璟新","楚怀","麒霖","堂耀","轩凝","舰曦","跃鑫","梓杰","筱宇","彦钧","羿天","皓睿","智铭","文林","志元","汕睿","孝林","凯昕","宇铭","皓予","皓玮","韵安","邑奕","谊华","煦忠","博平","汉庭","芷蔚","博毓","洋珈","越林","泳合","冀霁","渤林","悦晨","润临","鹊翔","钎震","锦骐","宇梵","文宣","翼沣","沛曦","宇渤","琦涛","启睿","志绮","元铭","熙鹏","奎贺","绍峰","子轩","思良","启邦","均雄","智新","佩玮","毅风","枞雄","韵林","晓昊","桂建","湘榆","湛豪","元源","泰安","梓鸿","恩宁","锐博","方迪","宏裕","新铭","昕瑜","熙彦","高澹","高飞","高芬","高峯","高峰","高歌","高格","高寒","高翰","亚楠","玉峰","项哲","俊良","煜玮","思翰","浩霖","宗玶","瀚俞","刚豪","刚洁","刚捷","刚毅","高昂","高岑","高畅","高超","高驰","高卓","光赫","光华","光辉","光济","光霁","光亮","光临","光明","高洁","高峻","高朗","高丽","高邈","高旻","高明","高爽","高兴","高雅","高扬","高阳","高义","高谊","高逸","高懿","高原","高远","问鼎","宇文","宇杰","弈峰","孔亮","蔚菁","彦屏","智浩","敏文","光熙","光耀","光誉","光远","国安","国兴","国源","冠宇","冠玉","温书","巍昂","巍然","巍奕","伟博","伟毅","伟才","伟诚","伟茂","伟泽","伟兆","伟志","温纶","温茂","温书","温韦","温文","温瑜","文德","文栋","文赋","文光","文翰","文虹","文华","文康","文乐","文山","文石","文星","文轩","文宣","文彦","文曜","文耀","文斌","向晨","向笛","向文","向明","向荣","向阳","翔宇","翔飞","项禹","心思","心远","欣德","欣嘉","欣可","欣然","欣荣","欣怡","欣怿","伟懋","伟祺","伟彦","文柏","文昌","文成","文林","文敏","文瑞","文彬","文滨","伟晔","项明","晓博","心水"
            };
            string[] girlName = new string[]
            {
                "栩栩","燕萍","瑛蔓","鹤梅","璇玑","歆迪","蔡琳","婧妍","斯玉","翊筠","珂妍","小莉","成美","倩冰","巧玲","妃妍","小雪","沁彤","帮琼","昱瑛","沂秀","祖萍","人萍","菊霞","雨琼","瑞娟","翎嘉","丽瑶","国娟","友梅","曹文","玉颖","妍如","智琳","新芳","潜","英豪","科翰","千怡","春嫣","诗琪","园媛","成娥","宇丞","欣秀","锦洁","太文","胜怡","欣玉","美玲","柯洁","育梅","洁莹","云琼","睿瑶","商丽","亚玲","优美","心漪","瑜文","姝瑶","春颖","华琳","妍婷","欣琳","熙玉","婧文","惠芳","炎琳","秀颖","龙艳","嘉怡","国琴","青霞","嫣钰","志芳","芷茹","悦颖","红英","焱霞","碧悦","海萍","琴子","筱雪","艺泽","蝾婷","怡婷","莉颖","芹悦","悦心","芝蓉","娅庭","树艳","小霞","厦洁","怡泽","欣颖","榕嫣","晓悦","燕芷","思丽","翠玉","庆霞","塔娜","雪芬","秀秀","书怡","水琼","梦茹","国英","玉萍","新妹","银玲","文霞","浩文","小芳","秋丽","春英","大梅","羽洁","小洁","慧瑶","芝芳","美玲","长文","应艳","琳爰","君茹","莉娉","纯雪","洲裴","志丽","莉萍","正妍","琳竣","玉致","若美","娅清","舒玉","映蓉","长英","丽美","夕文","琳涵","燕星","善玲","宇芳","铭倩","梓婧","世悦","艳蓉","丹洁","玲娇","卓妍","杭英","玲丽","婷雯","梓悦","秀娟","雯婧","瑶华","翠玲","锦婷","永茹","红琼","睿颖","炜琳","雨莹","炜婷","丽英","忠燕","瑞芬","馨婷","微笑","秀媛","雨花","秀珊","欣怡","思艳","紫颖","芬璇","梦洁","刖颖","慧玲","婧芸","光芳","婧玟","雯琴","红美","睿颖","葱娟","方玉","锦文","如意","雅丽","际红","悦玮","彦瑛","金燕","薇颖","媛媛","丽霞","悦淇","安娜","媛娜","杰文","周周","晓燕","向莉","丹嘉","爱茹","艳霞","怡瑶","小芬","婷秀","惠玲","于娜","沁媛","诺瑶","梓燕","玥佑","昊怡","小妍","悦张","秀芳","欣怡","晓梅","午瑶","亚萍","丽莉","会霞","龙梅","琳敏","展文","羽莹","艺萍","月玲","简单","海燕","晶婧","尤文","仪琳","玉娟","钰洁","蓉","令红","梅霞","秀秀","新颖","依娜","欣瑶","梦洁","菁茹","泽芳","怡若","陈红","婧宁","美怡","悦帆","莹莹","莉绫","红丽","昕怡","雪娟","卿蓉","晓洁","家颖","贝塔","湘媛","丹梅","薏冉","婷昱","怡可","琳淼","耿耿","瓶花","爱萍","雅莉","彩燕","思莹","桂燕","石英","腊梅","芬","莉娅","娟娣","艳红","棠莉","悦驰","玥佐","嘉洁","彩红","媛雪","美芳","束芳","淑琳","若瑶","姝媛","经文","姝妍","开琼","诗芳","曼萁","霞","曼菲","秀如","则悦","楚冉","桂芳","昱文","俊英","凤婷","雯丽","茹婷","艳红","有芳","专霞","巧茹","绪婷","石瑶","玉妍","佳洁","紫霞","雨茹","甫文","怡金","锐洁","悦书","粟梅","雄英","京艳","语瞳","燕齐","昕妍","倡文","紊文","子婧","爱琴","维娟","思娜","振文","鸾瑶","玲丽","旦娅","苏娟","宝琳","群芳","桂霞","德梅","燕萍","瑛蔓","鹤梅","蓉华","佳莉","蔡琳","婧妍","璐妃","恺玲","珂妍","小莉","成美","倩冰","巧玲","妃妍","小雪","娉娟","燕艳","妍青","静美","禾悦","妍凌","洁","惋洁","一芳","立芬","平霞","琴芬","芳媛","芷秀","翠玲","贤琴","采艳","怡翎","裕梅","玲芬","宣艳","冠芳","勤琼","国萍","承文","雪芬","妍玲","晓霞","依婷","瑾琳","永琴","荇怡","惠娅","进芳","翰颖","婉燕","景文","赛玉","晓玉","晋玉","幸瑶","歆琳","曾燕","国政","彩娟","三婷","雪婧","义文","学英","英莉","尔悦","洁","俞莹","生文","八雪","涟颖","媛媛","燕平","恬萍","暖怡","晴芳","瑶琴","荣霞","梓婷","莹","韧颖","琬莹","知燕","婵","雪萍","津文","琳秀","燕明","纯洁","素莉","艳玲","悦儿","春文","江红","李媛","木蓉","照红","鸿洁","宣蓉","娟","亚梅","羽洁","秋艳","建颖","泓茹","富霞","倩成","诗茹","欣瑶","曦秀","婷丽","莉娜","东玲","巧娜","佳艳","蓓莉","纪颖","瑞艳","玲玉","辰雪","瑜莉","兰娟","蓉洁","金文","伟娜","品怡","钊莹","嫦娥","路英","婉怡","冬雪","义茹","章文","宇玲","春梅","安娅","列琴","汉玲","泽琴","玲羽","燕肖","润洁","秉文","高妍","睿琳","悦营","茹芸","隅晖","泽英","筱雪","秀英","紫玲","崇芳","芸英","艾玲","红梅","小妹","惠琴","玲玉","文英","柏文","继红","娅彤","保哲","苑洁","星颖","燕晓","杨梅","玉娟","泽瑛","妍彤","婧雯","奚瑶","天洁","滢莹","芸莹","倩愉","贝琳","秋怡","曼玲","林娜","依玲","常红","琴轩","景怡","琬玲","妍茜","影梅","光文","立婷","琳","悦婷","婷旭","心悦","肖倩","清茹","姗婷","春霞","超莹"
            };

            DataTable dt = new DataTable();
            dt.Columns.Add("UserName", typeof(string));
            dt.Columns.Add("UserID", typeof(int));
            dt.Columns.Add(new DataColumn("AddTime", typeof(string)));
            
            Random rd = new Random();

            for (int i = 0; i < 1000; i++)
            {
                if (rd.Next(0, 2) == 1)
                {
                    //男名
                    DataRow dr = dt.NewRow();
                    string UserName = firstName[rd.Next(0, firstName.Length)] + boyName[rd.Next(0, boyName.Length)];
                    dr[0] = UserName;
                    int UserID = 1000 * rd.Next(1, 10) + 100 * i + 10 * rd.Next(0, 10) + rd.Next(0, 10);
                    dr[1] = UserID;
                    dr[2] = DateTime.Now.ToString();
                    dt.Rows.Add(dr);
                }
                else
                {
                    //foreach (DataRow item in dt.Rows)
                    //{
                    //    string UserName = firstName[rd.Next(0, firstName.Length)] + girlName[rd.Next(0, girlName.Length)];
                    //    item["UserName"] = UserName;
                    //    int UserID = 1000 * rd.Next(1, 10) + 100 * i + 10 * rd.Next(0, 10) + rd.Next(0, 10);
                    //    item["UserID"] = UserID;
                    //    item["AddTime"] = DateTime.Now.ToString();
                    //}
                    //女名
                    DataRow dr = dt.NewRow();
                    string UserName = firstName[rd.Next(0, firstName.Length)] + girlName[rd.Next(0, girlName.Length)];
                    dr[0] = UserName;
                    int UserID = 1000 * rd.Next(1, 10) + 100 * i + 10 * rd.Next(0, 10) + rd.Next(0, 10);
                    dr[1] = UserID;
                    dr[2] = DateTime.Now.ToString();
                    dt.Rows.Add(dr);
                }
            }
            Stopwatch st = new Stopwatch();
            st.Start();
            using (SqlConnection conn = new SqlConnection("Data Source=47.104.245.127,36577;database=Neroscofee_Test;user id=sa;pwd=1234.asd"))
            {
                conn.Open();
                using (SqlBulkCopy bulkCopy = new SqlBulkCopy(conn))
                {
                    try
                    {
                        bulkCopy.DestinationTableName = "ATest";
                        bulkCopy.ColumnMappings.Add("UserID", "UserID");
                        bulkCopy.ColumnMappings.Add("UserName", "UserName");
                        bulkCopy.ColumnMappings.Add("AddTime", "AddTime");
                        bulkCopy.WriteToServer(dt);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                    }

                }
            }
            st.Stop();
            Console.WriteLine("成功！测试时间为：" + st.ElapsedMilliseconds / 1000 + "秒");
            Console.ReadKey();
        }

    }
}
